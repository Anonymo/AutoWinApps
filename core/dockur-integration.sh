#!/usr/bin/env bash

# dockur/windows integration module
# This module handles automatic Windows setup via dockur/windows

# Function to create dockur configuration
create_dockur_config() {
    if [[ "$WINDOWS_SETUP_METHOD" != "dockur" ]]; then
        print_verbose "Skipping dockur configuration (manual setup selected)"
        return 0
    fi
    
    print_header "Configuring Automatic Windows Setup"
    
    if [[ "$DRY_RUN" == true ]]; then
        print_verbose "DRY RUN: Would create dockur/windows configuration"
        return 0
    fi
    
    local compose_dir="$HOME/.config/dockur-windows"
    mkdir -p "$compose_dir"
    
    # Choose Windows version
    echo "Available Windows versions:"
    echo "1. Windows 11 Pro (default)"
    echo "2. Windows 10 Pro"
    echo "3. Windows Server 2022"
    echo "4. Windows Server 2019"
    echo
    
    local windows_version="11"
    while true; do
        read -p "Choose version (1-4, default: 1): " version_choice
        case "$version_choice" in
            2) windows_version="10"; break ;;
            3) windows_version="2022"; break ;;
            4) windows_version="2019"; break ;;
            1|"") windows_version="11"; break ;;
            *) print_warning "Invalid choice. Please enter 1-4." ;;
        esac
    done
    
    # Resource allocation with validation
    local ram_gb cpu_cores disk_gb
    
    while true; do
        read -p "RAM allocation in GB (default: 4, min: 2): " ram_gb
        ram_gb=${ram_gb:-4}
        if [[ "$ram_gb" =~ ^[0-9]+$ ]] && [[ $ram_gb -ge 2 ]]; then
            break
        else
            print_warning "Invalid RAM amount. Minimum: 2GB"
        fi
    done
    
    while true; do
        read -p "CPU cores (default: 2, min: 1): " cpu_cores
        cpu_cores=${cpu_cores:-2}
        if [[ "$cpu_cores" =~ ^[0-9]+$ ]] && [[ $cpu_cores -ge 1 ]]; then
            break
        else
            print_warning "Invalid CPU count. Minimum: 1"
        fi
    done
    
    while true; do
        read -p "Disk size in GB (default: 64, min: 40): " disk_gb
        disk_gb=${disk_gb:-64}
        if [[ "$disk_gb" =~ ^[0-9]+$ ]] && [[ $disk_gb -ge 40 ]]; then
            break
        else
            print_warning "Invalid disk size. Minimum: 40GB"
        fi
    done
    
    # Generate secure random password
    local auto_password
    if command -v openssl &>/dev/null; then
        auto_password=$(openssl rand -base64 12)
    else
        auto_password="winapps$(date +%s | tail -c 4)"
    fi
    
    print_status "Generated secure password: $auto_password"
    
    # Create docker-compose.yml based on backend
    local compose_content
    if [[ "$SELECTED_BACKEND" == "podman" ]]; then
        compose_content="services:
  windows:
    image: docker.io/dockurr/windows
    container_name: windows-winapps
    hostname: winapps-windows
    environment:
      VERSION: \"$windows_version\"
      RAM_SIZE: \"${ram_gb}G\"
      CPU_CORES: \"$cpu_cores\"
      DISK_SIZE: \"${disk_gb}G\"
      USERNAME: \"WinApps\"
      PASSWORD: \"$auto_password\"
      LANGUAGE: \"English\"
    devices:
      - /dev/kvm:/dev/kvm
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - NET_ADMIN
    ports:
      - \"8006:8006\"    # Web viewer (noVNC)
      - \"3389:3389/tcp\" # RDP TCP
      - \"3389:3389/udp\" # RDP UDP
    volumes:
      - ./storage:/storage:Z
    restart: unless-stopped
    stop_grace_period: 2m
    security_opt:
      - label=disable"
    else
        compose_content="services:
  windows:
    image: dockurr/windows
    container_name: windows-winapps
    hostname: winapps-windows
    environment:
      VERSION: \"$windows_version\"
      RAM_SIZE: \"${ram_gb}G\"
      CPU_CORES: \"$cpu_cores\"
      DISK_SIZE: \"${disk_gb}G\"
      USERNAME: \"WinApps\"
      PASSWORD: \"$auto_password\"
      LANGUAGE: \"English\"
    devices:
      - /dev/kvm:/dev/kvm
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - NET_ADMIN
    ports:
      - \"8006:8006\"    # Web viewer (noVNC)
      - \"3389:3389/tcp\" # RDP TCP
      - \"3389:3389/udp\" # RDP UDP
    volumes:
      - ./storage:/storage
    restart: unless-stopped
    stop_grace_period: 2m"
    fi
    
    echo "$compose_content" > "$compose_dir/docker-compose.yml"
    
    # Create environment file for easy customization
    cat > "$compose_dir/.env" << EOF
# dockur/windows environment configuration
# Generated by AutoWinApps installer

WINDOWS_VERSION=$windows_version
RAM_SIZE=${ram_gb}G
CPU_CORES=$cpu_cores
DISK_SIZE=${disk_gb}G
USERNAME=WinApps
PASSWORD=$auto_password
LANGUAGE=English

# Ports
WEB_PORT=8006
RDP_PORT=3389

# Advanced settings (uncomment to override)
# KEYBOARD=en-US
# TIMEZONE=America/New_York
# ALLOCATION=2048
EOF
    
    # Update WinApps config with the generated password
    if [[ -f "$HOME/.config/winapps/winapps.conf" ]]; then
        sed -i "s/RDP_PASS=\"winapps123\"/RDP_PASS=\"$auto_password\"/" "$HOME/.config/winapps/winapps.conf"
    fi
    
    # Create storage directory
    mkdir -p "$compose_dir/storage"
    
    print_success "dockur/windows configuration created"
    print_verbose "Compose file: $compose_dir/docker-compose.yml"
    print_verbose "Environment: $compose_dir/.env"
    
    # Display configuration summary
    echo
    print_status "Configuration Summary:"
    echo "   • Windows Version: $windows_version"
    echo "   • RAM: ${ram_gb}GB"
    echo "   • CPU Cores: $cpu_cores"
    echo "   • Disk: ${disk_gb}GB"
    echo "   • Username: WinApps"
    echo "   • Password: $auto_password"
    echo "   • Web Interface: http://localhost:8006"
    echo "   • RDP: localhost:3389"
}

# Function to validate dockur requirements
validate_dockur_requirements() {
    if [[ "$WINDOWS_SETUP_METHOD" != "dockur" ]]; then
        return 0
    fi
    
    print_verbose "Validating dockur/windows requirements"
    
    # Check if KVM is available
    if [[ ! -e /dev/kvm ]]; then
        print_error "KVM device not found. Virtualization may not be enabled."
        print_status "Enable virtualization in BIOS/UEFI settings"
        return 1
    fi
    
    # Check if /dev/net/tun exists
    if [[ ! -e /dev/net/tun ]]; then
        print_warning "TUN/TAP device not found. Network may not work properly."
        print_status "You may need to load the tun module: sudo modprobe tun"
    fi
    
    # Check available ports
    if ss -tlnp | grep -q ":8006 "; then
        print_warning "Port 8006 is already in use. Web interface may not be accessible."
    fi
    
    if ss -tlnp | grep -q ":3389 "; then
        print_warning "Port 3389 is already in use. RDP may not be accessible."
    fi
    
    return 0
}

# Function to test dockur setup
test_dockur_setup() {
    if [[ "$WINDOWS_SETUP_METHOD" != "dockur" ]] || [[ "$DRY_RUN" == true ]]; then
        return 0
    fi
    
    print_header "Testing dockur/windows Setup"
    
    local compose_dir="$HOME/.config/dockur-windows"
    
    if [[ ! -f "$compose_dir/docker-compose.yml" ]]; then
        print_error "Docker Compose file not found"
        return 1
    fi
    
    print_status "Validating Docker Compose configuration..."
    
    if cd "$compose_dir" && $SELECTED_BACKEND-compose config >/dev/null 2>&1; then
        print_success "Docker Compose configuration is valid"
    else
        print_error "Invalid Docker Compose configuration"
        return 1
    fi
    
    print_status "Testing container engine..."
    
    if $SELECTED_BACKEND --version >/dev/null 2>&1; then
        print_success "Container engine is working"
    else
        print_error "Container engine is not responding"
        return 1
    fi
    
    return 0
}