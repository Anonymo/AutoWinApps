#!/usr/bin/env bash

# Core WinApps functionality
# This module contains the main WinApps setup logic

# Function to setup WinApps
setup_winapps() {
    print_header "Installing WinApps"
    
    if [[ "$DRY_RUN" == true ]]; then
        print_verbose "DRY RUN: Would download and install WinApps"
        return 0
    fi
    
    print_status "Downloading WinApps installer..."
    
    # Download with error handling and retry
    local max_retries=3
    local retry_count=0
    
    while [[ $retry_count -lt $max_retries ]]; do
        if curl -fsSL https://raw.githubusercontent.com/winapps-org/winapps/main/setup.sh | bash -s -- --user; then
            print_success "WinApps installed successfully"
            return 0
        else
            ((retry_count++))
            if [[ $retry_count -lt $max_retries ]]; then
                print_warning "Installation failed, retrying... ($retry_count/$max_retries)"
                sleep 5
            else
                print_error "Failed to install WinApps after $max_retries attempts"
                return 1
            fi
        fi
    done
}

# Function to create WinApps configuration
create_winapps_config() {
    print_header "Creating WinApps Configuration"
    
    if [[ "$DRY_RUN" == true ]]; then
        print_verbose "DRY RUN: Would create WinApps configuration"
        return 0
    fi
    
    # Configure filesystem for selected backend
    configure_filesystem_for_containers "$SELECTED_BACKEND"
    
    # Create config directory
    local config_dir="$HOME/.config/winapps"
    mkdir -p "$config_dir"
    
    # Set credentials based on method
    local rdp_user rdp_pass rdp_ip rdp_domain
    
    if [[ "$WINDOWS_SETUP_METHOD" == "dockur" ]]; then
        rdp_user="WinApps"
        rdp_pass="winapps123"
        rdp_ip="127.0.0.1"
        rdp_domain=""
        print_status "Using automatic dockur/windows credentials"
    else
        echo "Windows VM credentials:"
        read -p "Username: " rdp_user
        read -s -p "Password: " rdp_pass
        echo
        read -p "Windows Domain (optional): " rdp_domain
        
        # Set IP based on backend
        case "$SELECTED_BACKEND" in
            "libvirt")
                rdp_ip=""  # Auto-detect for libvirt
                ;;
            "docker"|"podman")
                rdp_ip="127.0.0.1"
                ;;
        esac
    fi
    
    # Create configuration file
    cat > "$config_dir/winapps.conf" << EOF
##################################
#   WINAPPS CONFIGURATION FILE   #
##################################

# Generated by AutoWinApps installer on $(date)

# [WINDOWS USERNAME]
RDP_USER="$rdp_user"

# [WINDOWS PASSWORD]
RDP_PASS="$rdp_pass"

# [WINDOWS DOMAIN]
RDP_DOMAIN="$rdp_domain"

# [WINDOWS IPV4 ADDRESS]
RDP_IP="$rdp_ip"

# [VM NAME]
VM_NAME="RDPWindows"

# [WINAPPS BACKEND]
WAFLAVOR="$SELECTED_BACKEND"

# [DISPLAY SCALING FACTOR]
RDP_SCALE="100"

# [MOUNTING REMOVABLE PATHS FOR FILES]
REMOVABLE_MEDIA="/run/media"

# [ADDITIONAL FREERDP FLAGS & ARGUMENTS]
RDP_FLAGS="/cert:tofu /sound /microphone +home-drive"

# [DEBUG WINAPPS]
DEBUG="true"

# [AUTOMATICALLY PAUSE WINDOWS]
AUTOPAUSE="off"

# [AUTOMATICALLY PAUSE WINDOWS TIMEOUT]
AUTOPAUSE_TIME="300"

# [FREERDP COMMAND]
FREERDP_COMMAND=""

# [TIMEOUTS]
PORT_TIMEOUT="5"
RDP_TIMEOUT="30"
APP_SCAN_TIMEOUT="60"
BOOT_TIMEOUT="120"
EOF
    
    # Set secure permissions
    chmod 600 "$config_dir/winapps.conf"
    
    print_success "WinApps configuration created"
    print_verbose "Config file: $config_dir/winapps.conf"
}

# Function to create management scripts
create_management_scripts() {
    print_header "Creating Management Scripts"
    
    if [[ "$DRY_RUN" == true ]]; then
        print_verbose "DRY RUN: Would create management scripts"
        return 0
    fi
    
    if [[ "$WINDOWS_SETUP_METHOD" == "dockur" ]]; then
        create_dockur_management_script
    else
        create_vm_creation_script
    fi
}

# Function to create dockur management script
create_dockur_management_script() {
    local script_path="$HOME/manage-windows.sh"
    local compose_dir="$HOME/.config/dockur-windows"
    
    cat > "$script_path" << EOF
#!/bin/bash
# Windows Container Management Script
# Generated by AutoWinApps installer

set -euo pipefail

COMPOSE_DIR="$compose_dir"
COMPOSE_COMMAND="$SELECTED_BACKEND-compose"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() {
    echo -e "\${BLUE}[INFO]\${NC} \$1"
}

print_success() {
    echo -e "\${GREEN}[SUCCESS]\${NC} \$1"
}

print_error() {
    echo -e "\${RED}[ERROR]\${NC} \$1"
}

case "\$1" in
    setup)
        echo "🚀 Setting up Windows (first time)..."
        cd "\$COMPOSE_DIR"
        \$COMPOSE_COMMAND up -d
        echo
        print_success "Windows container started"
        echo "🌐 Monitor installation: http://localhost:8006"
        echo "⏱️  Installation takes 15-30 minutes"
        echo "🔑 Login credentials: WinApps / winapps123"
        echo
        echo "📋 Next steps:"
        echo "1. Wait for Windows installation to complete"
        echo "2. Install your Windows applications"
        echo "3. Run: winapps-setup --user"
        ;;
    start)
        print_status "Starting Windows container..."
        cd "\$COMPOSE_DIR"
        \$COMPOSE_COMMAND start
        print_success "Windows started - RDP available at localhost:3389"
        ;;
    stop)
        print_status "Stopping Windows container..."
        cd "\$COMPOSE_DIR"
        \$COMPOSE_COMMAND stop
        print_success "Windows stopped"
        ;;
    restart)
        print_status "Restarting Windows container..."
        cd "\$COMPOSE_DIR"
        \$COMPOSE_COMMAND restart
        print_success "Windows restarted"
        ;;
    status)
        echo "Windows container status:"
        cd "\$COMPOSE_DIR"
        \$COMPOSE_COMMAND ps
        ;;
    logs)
        print_status "Showing Windows container logs (Ctrl+C to exit)..."
        cd "\$COMPOSE_DIR"
        \$COMPOSE_COMMAND logs -f
        ;;
    update)
        print_status "Updating Windows container..."
        cd "\$COMPOSE_DIR"
        \$COMPOSE_COMMAND pull
        \$COMPOSE_COMMAND up -d
        print_success "Windows container updated"
        ;;
    destroy)
        echo "⚠️  This will completely remove the Windows container and all data!"
        read -p "Are you sure? (type 'yes' to confirm): " confirm
        if [[ "\$confirm" == "yes" ]]; then
            cd "\$COMPOSE_DIR"
            \$COMPOSE_COMMAND down -v
            rm -rf storage/
            print_success "Windows container destroyed"
        else
            print_status "Operation cancelled"
        fi
        ;;
    *)
        echo "Usage: \$0 {setup|start|stop|restart|status|logs|update|destroy}"
        echo
        echo "Commands:"
        echo "  setup     - First time setup (downloads Windows)"
        echo "  start     - Start Windows container"
        echo "  stop      - Stop Windows container"
        echo "  restart   - Restart Windows container"
        echo "  status    - Show container status"
        echo "  logs      - Show container logs"
        echo "  update    - Update container image"
        echo "  destroy   - Remove container and all data"
        ;;
esac
EOF
    
    chmod +x "$script_path"
    print_success "Management script created: $script_path"
}

# Function to create VM creation script
create_vm_creation_script() {
    local script_path="$HOME/create-windows-vm.sh"
    
    cat > "$script_path" << 'EOF'
#!/bin/bash
# Windows VM Creation Helper
# Generated by AutoWinApps installer

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

echo "Windows VM Creation Helper"
echo "=========================="
echo "This script will create a Windows VM for WinApps."
echo "You need a Windows 10/11 ISO file."
echo

# Check if virt-install is available
if ! command -v virt-install &>/dev/null; then
    print_error "virt-install not found. Please install libvirt tools."
    exit 1
fi

# Get ISO path
while true; do
    read -p "Path to Windows ISO file: " iso_path
    if [[ -f "$iso_path" ]]; then
        break
    else
        print_error "File not found: $iso_path"
    fi
done

# Get VM specifications
read -p "VM RAM in MB (default: 4096): " vm_ram
vm_ram=${vm_ram:-4096}

read -p "VM disk size in GB (default: 60): " vm_disk
vm_disk=${vm_disk:-60}

read -p "VM CPU cores (default: 2): " vm_cpus
vm_cpus=${vm_cpus:-2}

# Validate inputs
if ! [[ "$vm_ram" =~ ^[0-9]+$ ]] || [[ $vm_ram -lt 2048 ]]; then
    print_error "Invalid RAM amount. Minimum: 2048MB"
    exit 1
fi

if ! [[ "$vm_disk" =~ ^[0-9]+$ ]] || [[ $vm_disk -lt 40 ]]; then
    print_error "Invalid disk size. Minimum: 40GB"
    exit 1
fi

if ! [[ "$vm_cpus" =~ ^[0-9]+$ ]] || [[ $vm_cpus -lt 1 ]]; then
    print_error "Invalid CPU count. Minimum: 1"
    exit 1
fi

print_status "Creating Windows VM with:"
print_status "  RAM: ${vm_ram}MB"
print_status "  Disk: ${vm_disk}GB"
print_status "  CPUs: $vm_cpus"
print_status "  ISO: $iso_path"

# Create VM
print_status "Creating VM (this may take a moment)..."

virt-install \
    --name RDPWindows \
    --ram $vm_ram \
    --disk path=/var/lib/libvirt/images/RDPWindows.qcow2,size=$vm_disk,format=qcow2 \
    --vcpus $vm_cpus \
    --os-variant win10 \
    --network network=default \
    --graphics spice,listen=0.0.0.0 \
    --console pty,target_type=serial \
    --cdrom "$iso_path" \
    --boot cdrom,hd \
    --features acpi=on,apic=on,hyperv_relaxed=on,hyperv_vapic=on,hyperv_spinlocks=on,hyperv_spinlocks_retries=8191 \
    --noautoconsole

print_success "VM created successfully!"
echo
echo "📋 Next steps:"
echo "1. Use virt-manager to complete Windows installation"
echo "2. Install Windows and configure Remote Desktop"
echo "3. Run: winapps-setup --user"
echo
echo "🔧 Useful commands:"
echo "  virsh start RDPWindows    - Start the VM"
echo "  virsh shutdown RDPWindows - Shutdown the VM"
echo "  virt-manager              - Open VM manager"
EOF
    
    chmod +x "$script_path"
    print_success "VM creation script created: $script_path"
}